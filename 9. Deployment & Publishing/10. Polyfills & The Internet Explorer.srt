1
00:00:02,520 --> 00:00:06,630
Now let's briefly have a look at that browser support thing again.

2
00:00:06,930 --> 00:00:13,560
If we are on stenciljs.com, we can go to the browser support area and there, we see the current

3
00:00:13,650 --> 00:00:18,500
state of browser support of the web components generated by stencil.

4
00:00:18,520 --> 00:00:25,200
Now as you can tell, all modern browsers except for Edge fully support all features natively, you can

5
00:00:25,200 --> 00:00:31,600
see that in the table down there even better, Edge and Internet Explorer 11 are kind of the problematic browsers,

6
00:00:31,850 --> 00:00:33,630
Edge is almost there,

7
00:00:33,630 --> 00:00:36,030
some features are missing and polyfilled for now,

8
00:00:36,030 --> 00:00:40,720
Bb the time you're watching this, Edge might already support all these things natively,

9
00:00:40,890 --> 00:00:47,760
Internet Explorer will never support them natively though and therefore, I copied my React app onto my

10
00:00:47,760 --> 00:00:55,020
Windows machine and I ran it there, ran npm install first and let's see if that works in Edge and Internet Explorer.

11
00:00:55,150 --> 00:00:59,070
Now in Edge, if you load it there, it should just work,

12
00:00:59,100 --> 00:01:05,540
you shouldn't need to make any adjustments, it should just work there out of the box without any changes

13
00:01:05,640 --> 00:01:11,320
and it works in exactly the same way it works in Chrome, Safari or Firefox,

14
00:01:11,340 --> 00:01:17,880
so there we see these automatic polyfills being loaded and please be aware that they really are only

15
00:01:17,880 --> 00:01:19,480
loaded in that environment.

16
00:01:19,530 --> 00:01:24,810
If you're running the app in a browser that supports a feature natively, let's say the shadow DOM, then

17
00:01:24,810 --> 00:01:29,340
the respective polyfill is not loaded. In the Internet Explorer,

18
00:01:29,340 --> 00:01:35,790
it would not work out of the box because when I'm recording this, two things are not working. For one,

19
00:01:36,000 --> 00:01:39,420
the promise features are not polyfilled correctly.

20
00:01:39,420 --> 00:01:45,630
Now normally they should be because next gen Javascript functionalities are added by stencil too

21
00:01:45,840 --> 00:01:51,660
but we can easily fix that by adding our own polyfill, here I'm just importing it in the index.html file,

22
00:01:51,660 --> 00:01:58,170
you can find a link to that polyfill in the last lecture of this module. And there's one issue after

23
00:01:58,170 --> 00:01:59,330
I added this polyfill,

24
00:01:59,340 --> 00:02:06,090
it generally works but you see the styling for this second component is missing and that is simply missing

25
00:02:06,300 --> 00:02:12,510
because the CSS variables polyfill doesn't seem to be loaded correctly here and at the point of this

26
00:02:12,510 --> 00:02:16,020
recording, this is simply an open bug in the stencil

27
00:02:16,030 --> 00:02:20,350
repository, so it might very well be fixed when you are viewing this.

28
00:02:20,370 --> 00:02:23,330
Please be aware that generally, the components still works though,

29
00:02:23,400 --> 00:02:28,730
just the variable styling is missing. so if you need to support Internet Explorer right now, you either

30
00:02:28,750 --> 00:02:33,970
need to load polyfill for that feature on your own or leave out CSS variables.

31
00:02:34,170 --> 00:02:39,930
But with that, we see that indeed we got web components that run in a broad variety of browsers, covering

32
00:02:39,930 --> 00:02:45,690
the vast majority of the browser landscape and therefore, we got a really awesome feature which is ready

33
00:02:45,690 --> 00:02:46,680
to use right now.
